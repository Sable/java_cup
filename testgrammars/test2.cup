/* Minijava Grammar */
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.XMLElement;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamWriter;
import java.io.*;
parser code {: 
  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex,sf);
  }
  public static void main(String[] args) throws Exception {
      ComplexSymbolFactory csf = new ComplexSymbolFactory();
      Parser p = new Parser(new Lexer(new BufferedReader(new FileReader(args[0])),csf),csf);
      XMLElement e = (XMLElement)p.parse().value;
      XMLOutputFactory outFactory = XMLOutputFactory.newInstance();
      XMLStreamWriter sw = outFactory.createXMLStreamWriter(new FileOutputStream(args[1]));
      XMLElement.dump(sw,e);
  }
:}; 



/* Terminals (tokens returned by lexer). */
terminal         SEMICOLON, COMMA, LPAR, RPAR, BEGIN, END, IF, ELSE, WHILE, READ, WRITE, BUNOP, ASSIGN;

terminal Integer TYPE, BINOP, UNOP, COMP, BBINOP, INTCONST;
terminal String  IDENT,STRINGCONST;
terminal Boolean BOOLCONST;

non terminal program, decllist,decl,stmtlist,identlist,stmt,expr,cond;

precedence left ELSE, UNOP, BINOP, BUNOP, BBINOP;

program   ::=  decllist:d stmtlist:s
    ;
decllist  ::=  decl:d decllist:dl
    | /* leere decllist */
    ;
stmtlist  ::= stmtlist:sl stmt:s
    | /* leere stmtlist */
        ;
decl ::= TYPE IDENT:i identlist:il  SEMICOLON
    ;
identlist  ::= identlist:il COMMA IDENT:i
    | /* leere identlist*/
    ;
stmt ::= SEMICOLON
    | BEGIN stmtlist:sl END
    | IDENT:i ASSIGN expr:e SEMICOLON
    | IDENT:i ASSIGN READ LPAR RPAR SEMICOLON
    | IDENT:i ASSIGN READ LPAR STRINGCONST:s RPAR SEMICOLON
    | WRITE LPAR expr:e RPAR SEMICOLON
    | WRITE LPAR STRINGCONST:s RPAR SEMICOLON
    | IF LPAR cond:c RPAR stmt:s
    | IF LPAR cond:c RPAR stmt:t ELSE stmt:e
    | WHILE LPAR cond:c RPAR stmt:s
    ;
cond ::= BOOLCONST:c
    | LPAR cond:c RPAR
    | expr:e1 COMP:op expr:e2
    | BUNOP cond:c
    | cond:c1 BBINOP:op cond:c2
    ;
expr ::= IDENT:i
    | INTCONST:c
    | LPAR expr:e RPAR
    | BINOP expr:e
    | expr:e1 BINOP:op expr:e2
    ;

