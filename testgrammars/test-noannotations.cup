/* Minijava Grammar */
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ScannerBuffer;
import java_cup.runtime.XMLElement;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamWriter;

import javax.xml.transform.*;
import javax.xml.transform.stream.*;

import java.io.*;
parser code {: 
  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex,sf);
  }
  public static void main(String[] args) throws Exception {
      ComplexSymbolFactory csf = new ComplexSymbolFactory();
      ScannerBuffer lexer = new ScannerBuffer(new Lexer(new BufferedReader(new FileReader(args[0])),csf));
      Parser p = new Parser(lexer,csf);
      XMLElement e = (XMLElement)p.parse().value;
      XMLOutputFactory outFactory = XMLOutputFactory.newInstance();
      XMLStreamWriter sw = outFactory.createXMLStreamWriter(new FileOutputStream(args[1]));
      XMLElement.dump(lexer,sw,e,"expr","stmt");
      
      Transformer transformer =  TransformerFactory.newInstance().newTransformer(new StreamSource(new File("tree.xsl")));
      Source text = new StreamSource(new File(args[1]));
      transformer.transform(text, new StreamResult(new File("output.html")));
  }
:}; 



/* Terminals (tokens returned by lexer). */
terminal         SEMICOLON, COMMA, LPAR, RPAR, BEGIN, END, IF, ELSE, WHILE, READ, WRITE, BUNOP, ASSIGN;

terminal Integer TYPE, BINOP, UNOP, COMP, BBINOP, INTCONST;
terminal String  IDENT,STRINGCONST;
terminal Boolean BOOLCONST;

non terminal program, decllist,decl,stmtlist,identlist,stmt,expr,cond;

precedence left ELSE, UNOP, BINOP, BUNOP, BBINOP;

program   ::=  decllist stmtlist
    ;
decllist  ::=  decl decllist
    | 
    ;
stmtlist  ::= stmtlist stmt
    | 
        ;
decl ::= TYPE IDENT identlist  SEMICOLON
    ;
identlist  ::= identlist COMMA IDENT
    | 
    ;
stmt ::= SEMICOLON
    | BEGIN stmtlist END
    | IDENT ASSIGN expr SEMICOLON
    | IDENT ASSIGN READ LPAR RPAR SEMICOLON
    | IDENT ASSIGN READ LPAR STRINGCONST RPAR SEMICOLON
    | WRITE LPAR expr RPAR SEMICOLON
    | WRITE LPAR STRINGCONST RPAR SEMICOLON
    | IF LPAR cond RPAR stmt
    | IF LPAR cond RPAR stmt ELSE stmt
    | WHILE LPAR cond RPAR stmt
    ;
cond ::= BOOLCONST
    | LPAR cond RPAR
    | expr COMP expr
    | BUNOP cond
    | cond BBINOP cond
    ;
expr ::= IDENT
    | INTCONST
    | LPAR expr RPAR
    | BINOP expr
    | expr BINOP expr
    ;

